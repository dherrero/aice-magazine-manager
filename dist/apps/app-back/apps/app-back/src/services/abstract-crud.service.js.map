{
  "version": 3,
  "sources": ["../../../../../../../apps/app-back/src/services/abstract-crud.service.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport sequelize, { ModelStatic } from 'sequelize';\n\n/**\n * Abstract class to be extended by all services\n * provides basic CRUD operations\n */\n\nexport abstract class AbstractCrudService {\n  protected model: ModelStatic<any>;\n\n  constructor(model: ModelStatic<any>) {\n    this.model = model;\n  }\n\n  getAllPaged = async (\n    page: number,\n    limit: number,\n    where: Record<string, any> = { deleted: false },\n    excludeColumns?: string[]\n  ) => {\n    const offset = (page - 1) * limit;\n    return await this.model.findAndCountAll({\n      attributes: {\n        exclude: excludeColumns ?? this.excludeColumns(where.deleted),\n      },\n      where,\n      limit,\n      offset,\n    });\n  };\n  getAll = async (\n    where: Record<string, any> = { deleted: false },\n    excludeColumns?: string[]\n  ) =>\n    await this.model.findAll({\n      attributes: {\n        exclude: excludeColumns ?? this.excludeColumns(where.deleted),\n      },\n      where,\n    });\n\n  getById = async (\n    where: Record<string, any> = { deleted: false },\n    excludeColumns?: string[]\n  ) =>\n    await this.model.findOne({\n      attributes: {\n        exclude: excludeColumns ?? this.excludeColumns(where.deleted),\n      },\n      where,\n    });\n\n  post = async (model) => await this.model.create(model);\n\n  put = async (id: number, data) =>\n    await this.model.update({ ...data }, { where: { id } });\n\n  delete = async (id: number) =>\n    await this.model.update(\n      { deleted: true, deletedAt: sequelize.literal('CURRENT_TIMESTAMP') },\n      { where: { id } }\n    );\n\n  private excludeColumns(showDeleted = false) {\n    const excluded = ['password'];\n    if (!showDeleted) {\n      excluded.push('deleted', 'deletedAt');\n    }\n    return excluded;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,uBAAuC;AAOhC,MAAe,oBAAoB;AAAA,EAGxC,YAAY,OAAyB;AAIrC,uBAAc,OACZ,MACA,OACA,QAA6B,EAAE,SAAS,MAAM,GAC9C,mBACG;AACH,YAAM,UAAU,OAAO,KAAK;AAC5B,aAAO,MAAM,KAAK,MAAM,gBAAgB;AAAA,QACtC,YAAY;AAAA,UACV,SAAS,kBAAkB,KAAK,eAAe,MAAM,OAAO;AAAA,QAC9D;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AACA,kBAAS,OACP,QAA6B,EAAE,SAAS,MAAM,GAC9C,mBAEA,MAAM,KAAK,MAAM,QAAQ;AAAA,MACvB,YAAY;AAAA,QACV,SAAS,kBAAkB,KAAK,eAAe,MAAM,OAAO;AAAA,MAC9D;AAAA,MACA;AAAA,IACF,CAAC;AAEH,mBAAU,OACR,QAA6B,EAAE,SAAS,MAAM,GAC9C,mBAEA,MAAM,KAAK,MAAM,QAAQ;AAAA,MACvB,YAAY;AAAA,QACV,SAAS,kBAAkB,KAAK,eAAe,MAAM,OAAO;AAAA,MAC9D;AAAA,MACA;AAAA,IACF,CAAC;AAEH,gBAAO,OAAO,UAAU,MAAM,KAAK,MAAM,OAAO,KAAK;AAErD,eAAM,OAAO,IAAY,SACvB,MAAM,KAAK,MAAM,OAAO,EAAE,GAAG,KAAK,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;AAExD,kBAAS,OAAO,OACd,MAAM,KAAK,MAAM;AAAA,MACf,EAAE,SAAS,MAAM,WAAW,iBAAAA,QAAU,QAAQ,mBAAmB,EAAE;AAAA,MACnE,EAAE,OAAO,EAAE,GAAG,EAAE;AAAA,IAClB;AAlDA,SAAK,QAAQ;AAAA,EACf;AAAA,EAmDQ,eAAe,cAAc,OAAO;AAC1C,UAAM,WAAW,CAAC,UAAU;AAC5B,QAAI,CAAC,aAAa;AAChB,eAAS,KAAK,WAAW,WAAW;AAAA,IACtC;AACA,WAAO;AAAA,EACT;AACF;",
  "names": ["sequelize"]
}
