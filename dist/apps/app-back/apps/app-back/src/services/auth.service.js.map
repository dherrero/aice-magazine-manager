{
  "version": 3,
  "sources": ["../../../../../../../apps/app-back/src/services/auth.service.ts"],
  "sourcesContent": ["import { User, UserModel } from '@back/models';\nimport { compare, hash } from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n\nclass AuthService {\n  #secret = process.env.NODE_JWT_SECRET;\n\n  login = async (email: string, password: string): Promise<UserModel> => {\n    const user: UserModel = await User.findOne({ where: { email } });\n    if (!user) throw new Error('Email or password incorrect.');\n    const validPassword = await this.#comparePassword(password, user.password);\n    if (!validPassword) throw new Error('Email or password incorrect.');\n    return user;\n  };\n\n  getUser = async (id: number): Promise<UserModel> => await User.findByPk(id);\n\n  generateToken = async (payload, expiresIn: string) => {\n    return jwt.sign(payload, this.#secret, { expiresIn });\n  };\n\n  verifyToken = (token: string) => {\n    return jwt.verify(token, this.#secret);\n  };\n\n  hashPassword = async (password: string) => {\n    return await hash(password, process.env.NODE_HASH_SALT_ROUNDS ?? 10);\n  };\n\n  #comparePassword = async (password: string, hash: string) => {\n    return await compare(password, hash);\n  };\n}\n\nconst authService = new AuthService();\n\nexport default authService;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgC;AAChC,oBAA8B;AAC9B,0BAAgB;AAEhB,MAAM,YAAY;AAAA,EAAlB;AACE,mBAAU,QAAQ,IAAI;AAEtB,iBAAQ,OAAO,OAAe,aAAyC;AACrE,YAAM,OAAkB,MAAM,mBAAK,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;AAC/D,UAAI,CAAC;AAAM,cAAM,IAAI,MAAM,8BAA8B;AACzD,YAAM,gBAAgB,MAAM,KAAK,iBAAiB,UAAU,KAAK,QAAQ;AACzE,UAAI,CAAC;AAAe,cAAM,IAAI,MAAM,8BAA8B;AAClE,aAAO;AAAA,IACT;AAEA,mBAAU,OAAO,OAAmC,MAAM,mBAAK,SAAS,EAAE;AAE1E,yBAAgB,OAAO,SAAS,cAAsB;AACpD,aAAO,oBAAAA,QAAI,KAAK,SAAS,KAAK,SAAS,EAAE,UAAU,CAAC;AAAA,IACtD;AAEA,uBAAc,CAAC,UAAkB;AAC/B,aAAO,oBAAAA,QAAI,OAAO,OAAO,KAAK,OAAO;AAAA,IACvC;AAEA,wBAAe,OAAO,aAAqB;AACzC,aAAO,UAAM,oBAAK,UAAU,QAAQ,IAAI,yBAAyB,EAAE;AAAA,IACrE;AAEA,4BAAmB,OAAO,UAAkBC,UAAiB;AAC3D,aAAO,UAAM,uBAAQ,UAAUA,KAAI;AAAA,IACrC;AAAA;AAAA,EA1BA;AAAA,EAwBA;AAGF;AAEA,MAAM,cAAc,IAAI,YAAY;AAEpC,IAAO,uBAAQ;",
  "names": ["jwt", "hash"]
}
