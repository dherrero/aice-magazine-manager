{
  "version": 3,
  "sources": ["../../../../../../../apps/app-back/src/services/pdf.service.ts"],
  "sourcesContent": ["import { APP_DIR } from '@back/globals';\nimport { Magazine, Page } from '@back/models';\nimport { FilterhMagazineType } from '@dto';\nimport pdf from 'pdf-parse';\nimport { fromBuffer } from 'pdf2pic';\nimport { WriteImageResponse } from 'pdf2pic/dist/types/convertResponse';\nimport { Includeable, Op } from 'sequelize';\ninterface PdfContent {\n  textByPage: { pageNumber: number; text: string }[];\n  metadata: string;\n}\n\nexport default class PdfService {\n  static async parsePdf(fileBuffer: Buffer): Promise<PdfContent> {\n    const data = await pdf(fileBuffer);\n    const pages = data.text.split('\\n\\n');\n\n    const textByPage = pages.map((text, index) => ({\n      pageNumber: index + 1,\n      text,\n    }));\n    return {\n      textByPage,\n      metadata: data.info.Title || 'Unknown Title',\n    };\n  }\n\n  static urlImageUploaded(path: string) {\n    return path.replace(APP_DIR, '');\n  }\n\n  static async extractFrontPage(\n    fileBuffer: Buffer,\n    savePath: string,\n    saveFilename: string\n  ): Promise<WriteImageResponse> {\n    const options = {\n      density: 100,\n      quality: 100,\n      format: 'png',\n      width: 800,\n      height: 600,\n      savePath,\n      saveFilename,\n      responseType: 'image',\n    };\n\n    const storeAsImage = fromBuffer(fileBuffer, options);\n    return await storeAsImage(1);\n  }\n\n  static async savePdfContent(\n    pdfData: PdfContent,\n    publicationNumber: string,\n    publhishedAt: Date,\n    fileName: string,\n    fileFrontPage?: string\n  ) {\n    const newMagazine = await Magazine.create({\n      number: Number(publicationNumber),\n      publhishedAt: publhishedAt,\n      image: fileFrontPage ?? null,\n      path: fileName,\n    });\n    const pages = pdfData.textByPage.flatMap((page) => [\n      {\n        number: page.pageNumber,\n        publicationNumber: publicationNumber,\n        title: pdfData.metadata,\n        content: page.text,\n        magazineId: newMagazine.id,\n      },\n    ]);\n    try {\n      await Page.bulkCreate(pages);\n    } catch (e) {\n      await Magazine.destroy({ where: { id: newMagazine.id } });\n      throw e;\n    }\n    return newMagazine;\n  }\n\n  static async searchInIndexedContent(\n    query: string,\n    type?: string,\n    number?: string\n  ) {\n    const include = this.#getIncludeValue(type, number);\n    const results = await Page.findAll({\n      include,\n      where: {\n        [Op.and]: {\n          content: {\n            [Op.iLike]: `%${query}%`,\n          },\n          deleted: false,\n        },\n      },\n    });\n\n    return results;\n  }\n\n  static #getIncludeValue(type?: string, number?: string): Includeable {\n    if (!type || !number) {\n      return Magazine;\n    }\n    const filterByNumber = {};\n    let opType;\n    switch (+type) {\n      case FilterhMagazineType.EQUAL:\n        opType = Op.eq;\n        break;\n      case FilterhMagazineType.GREATERTHAN:\n        opType = Op.gt;\n        break;\n      case FilterhMagazineType.GREATERTHANEQUAL:\n        opType = Op.gte;\n        break;\n      case FilterhMagazineType.LESSTHAN:\n        opType = Op.lt;\n        break;\n      case FilterhMagazineType.LESSTHANEQUAL:\n        opType = Op.lte;\n        break;\n    }\n    filterByNumber['number'] = {};\n    filterByNumber['number'][opType] = number;\n    return { model: Magazine, where: filterByNumber };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAwB;AACxB,oBAA+B;AAC/B,iBAAoC;AACpC,uBAAgB;AAChB,qBAA2B;AAE3B,uBAAgC;AAMhC,MAAO,WAAyB;AAAA,EAC9B,aAAa,SAAS,YAAyC;AAC7D,UAAM,OAAO,UAAM,iBAAAA,SAAI,UAAU;AACjC,UAAM,QAAQ,KAAK,KAAK,MAAM,MAAM;AAEpC,UAAM,aAAa,MAAM,IAAI,CAAC,MAAM,WAAW;AAAA,MAC7C,YAAY,QAAQ;AAAA,MACpB;AAAA,IACF,EAAE;AACF,WAAO;AAAA,MACL;AAAA,MACA,UAAU,KAAK,KAAK,SAAS;AAAA,IAC/B;AAAA,EACF;AAAA,EAEA,OAAO,iBAAiB,MAAc;AACpC,WAAO,KAAK,QAAQ,wBAAS,EAAE;AAAA,EACjC;AAAA,EAEA,aAAa,iBACX,YACA,UACA,cAC6B;AAC7B,UAAM,UAAU;AAAA,MACd,SAAS;AAAA,MACT,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,MACA,cAAc;AAAA,IAChB;AAEA,UAAM,mBAAe,2BAAW,YAAY,OAAO;AACnD,WAAO,MAAM,aAAa,CAAC;AAAA,EAC7B;AAAA,EAEA,aAAa,eACX,SACA,mBACA,cACA,UACA,eACA;AACA,UAAM,cAAc,MAAM,uBAAS,OAAO;AAAA,MACxC,QAAQ,OAAO,iBAAiB;AAAA,MAChC;AAAA,MACA,OAAO,iBAAiB;AAAA,MACxB,MAAM;AAAA,IACR,CAAC;AACD,UAAM,QAAQ,QAAQ,WAAW,QAAQ,CAAC,SAAS;AAAA,MACjD;AAAA,QACE,QAAQ,KAAK;AAAA,QACb;AAAA,QACA,OAAO,QAAQ;AAAA,QACf,SAAS,KAAK;AAAA,QACd,YAAY,YAAY;AAAA,MAC1B;AAAA,IACF,CAAC;AACD,QAAI;AACF,YAAM,mBAAK,WAAW,KAAK;AAAA,IAC7B,SAAS,GAAG;AACV,YAAM,uBAAS,QAAQ,EAAE,OAAO,EAAE,IAAI,YAAY,GAAG,EAAE,CAAC;AACxD,YAAM;AAAA,IACR;AACA,WAAO;AAAA,EACT;AAAA,EAEA,aAAa,uBACX,OACA,MACA,QACA;AACA,UAAM,UAAU,KAAK,iBAAiB,MAAM,MAAM;AAClD,UAAM,UAAU,MAAM,mBAAK,QAAQ;AAAA,MACjC;AAAA,MACA,OAAO;AAAA,QACL,CAAC,oBAAG,GAAG,GAAG;AAAA,UACR,SAAS;AAAA,YACP,CAAC,oBAAG,KAAK,GAAG,IAAI,KAAK;AAAA,UACvB;AAAA,UACA,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,iBAAiB,MAAe,QAA8B;AACnE,QAAI,CAAC,QAAQ,CAAC,QAAQ;AACpB,aAAO;AAAA,IACT;AACA,UAAM,iBAAiB,CAAC;AACxB,QAAI;AACJ,YAAQ,CAAC,MAAM;AAAA,MACb,KAAK,+BAAoB;AACvB,iBAAS,oBAAG;AACZ;AAAA,MACF,KAAK,+BAAoB;AACvB,iBAAS,oBAAG;AACZ;AAAA,MACF,KAAK,+BAAoB;AACvB,iBAAS,oBAAG;AACZ;AAAA,MACF,KAAK,+BAAoB;AACvB,iBAAS,oBAAG;AACZ;AAAA,MACF,KAAK,+BAAoB;AACvB,iBAAS,oBAAG;AACZ;AAAA,IACJ;AACA,mBAAe,QAAQ,IAAI,CAAC;AAC5B,mBAAe,QAAQ,EAAE,MAAM,IAAI;AACnC,WAAO,EAAE,OAAO,wBAAU,OAAO,eAAe;AAAA,EAClD;AACF;",
  "names": ["pdf"]
}
