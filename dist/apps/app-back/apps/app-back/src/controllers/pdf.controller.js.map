{
  "version": 3,
  "sources": ["../../../../../../../apps/app-back/src/controllers/pdf.controller.ts"],
  "sourcesContent": ["import { UPLOAD_DIR } from '@back/globals';\nimport { PdfService } from '@back/services';\nimport { Request, Response } from 'express';\nimport fs from 'fs';\nimport path from 'path';\n\n// Controller for PDF upload and search\nexport default class PdfController {\n  static async uploadPdf(req: Request, res: Response) {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      const { publicationNumber, publhishedAt } = req.body;\n      if (!publicationNumber || !publhishedAt) {\n        return res\n          .status(400)\n          .json({ message: 'Miss data for Magazine model' });\n      }\n\n      const fileBuffer = req.file.buffer;\n      const pdfData = await PdfService.parsePdf(fileBuffer);\n\n      const fileName = req.file.originalname.replace(/ /g, '_');\n      const filePath = path.join(UPLOAD_DIR, fileName);\n      const relativePath = process.env.NODE_UPLOAD_FILES\n        ? `/${process.env.NODE_UPLOAD_FILES}/${fileName}`\n        : `/uploads/${fileName}`;\n\n      let fileFrontPage;\n      try {\n        fileFrontPage =\n          process.env.NODE_PRODUCTION === 'true'\n            ? await PdfService.extractFrontPage(\n                fileBuffer,\n                path.join(UPLOAD_DIR),\n                `portada${fileName.replace('.pdf', '')}`\n              )\n            : { path: undefined };\n      } catch (error) {\n        console.error(error);\n        fileFrontPage = { path: undefined };\n      }\n\n      await PdfService.savePdfContent(\n        pdfData,\n        publicationNumber,\n        publhishedAt,\n        relativePath,\n        fileFrontPage.path\n          ? PdfService.urlImageUploaded(fileFrontPage.path)\n          : undefined\n      );\n\n      fs.writeFileSync(filePath, fileBuffer);\n\n      res.status(200).json({ message: 'PDF uploaded successfully' });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: 'Error uploading PDF', error });\n    }\n  }\n\n  static async searchPdf(req: Request, res: Response) {\n    try {\n      const { query, type, number } = req.query;\n      const results = await PdfService.searchInIndexedContent(\n        query as string,\n        type as string,\n        number as string\n      );\n      res.status(200).json(results);\n    } catch (error) {\n      res.status(500).json({ message: 'Error searching PDFs', error });\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA2B;AAC3B,sBAA2B;AAE3B,gBAAe;AACf,kBAAiB;AAGjB,MAAO,cAA4B;AAAA,EACjC,aAAa,UAAU,KAAc,KAAe;AAClD,QAAI;AACF,UAAI,CAAC,IAAI,MAAM;AACb,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,mBAAmB,CAAC;AAAA,MAC7D;AAEA,YAAM,EAAE,mBAAmB,aAAa,IAAI,IAAI;AAChD,UAAI,CAAC,qBAAqB,CAAC,cAAc;AACvC,eAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,SAAS,+BAA+B,CAAC;AAAA,MACrD;AAEA,YAAM,aAAa,IAAI,KAAK;AAC5B,YAAM,UAAU,MAAM,2BAAW,SAAS,UAAU;AAEpD,YAAM,WAAW,IAAI,KAAK,aAAa,QAAQ,MAAM,GAAG;AACxD,YAAM,WAAW,YAAAA,QAAK,KAAK,2BAAY,QAAQ;AAC/C,YAAM,eAAe,QAAQ,IAAI,oBAC7B,IAAI,QAAQ,IAAI,iBAAiB,IAAI,QAAQ,KAC7C,YAAY,QAAQ;AAExB,UAAI;AACJ,UAAI;AACF,wBACE,QAAQ,IAAI,oBAAoB,SAC5B,MAAM,2BAAW;AAAA,UACf;AAAA,UACA,YAAAA,QAAK,KAAK,yBAAU;AAAA,UACpB,UAAU,SAAS,QAAQ,QAAQ,EAAE,CAAC;AAAA,QACxC,IACA,EAAE,MAAM,OAAU;AAAA,MAC1B,SAAS,OAAO;AACd,gBAAQ,MAAM,KAAK;AACnB,wBAAgB,EAAE,MAAM,OAAU;AAAA,MACpC;AAEA,YAAM,2BAAW;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,cAAc,OACV,2BAAW,iBAAiB,cAAc,IAAI,IAC9C;AAAA,MACN;AAEA,gBAAAC,QAAG,cAAc,UAAU,UAAU;AAErC,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,4BAA4B,CAAC;AAAA,IAC/D,SAAS,OAAO;AACd,cAAQ,MAAM,KAAK;AACnB,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,MAAM,CAAC;AAAA,IAChE;AAAA,EACF;AAAA,EAEA,aAAa,UAAU,KAAc,KAAe;AAClD,QAAI;AACF,YAAM,EAAE,OAAO,MAAM,OAAO,IAAI,IAAI;AACpC,YAAM,UAAU,MAAM,2BAAW;AAAA,QAC/B;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,UAAI,OAAO,GAAG,EAAE,KAAK,OAAO;AAAA,IAC9B,SAAS,OAAO;AACd,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,wBAAwB,MAAM,CAAC;AAAA,IACjE;AAAA,EACF;AACF;",
  "names": ["path", "fs"]
}
