{
  "version": 3,
  "sources": ["../../../../../../../apps/app-back/src/controllers/abstract-crud.controller.ts"],
  "sourcesContent": ["import HttpResponser from '@back/adapters/http/http.responser';\nimport { AbstractCrudService } from '@back/services/abstract-crud.service';\n\nexport abstract class AbstractCrudController {\n  protected service: AbstractCrudService;\n\n  constructor(service: AbstractCrudService) {\n    this.service = service;\n  }\n\n  getAllPaged = async (req, res) => {\n    try {\n      const { page, limit } = req.query;\n      const data = await this.service.getAllPaged(page, limit);\n      return HttpResponser.successJson(res, data);\n    } catch (error) {\n      return HttpResponser.errorJson(res, error);\n    }\n  };\n\n  getAll = async (_, res) => {\n    try {\n      const data = await this.service.getAll();\n      return HttpResponser.successJson(res, data);\n    } catch (error) {\n      return HttpResponser.errorJson(res, error);\n    }\n  };\n\n  getById = async (req, res) => {\n    try {\n      const data = await this.service.getById({\n        id: req.params.id,\n        deleted: false,\n      });\n      return HttpResponser.successJson(res, data);\n    } catch (error) {\n      return HttpResponser.errorJson(res, error);\n    }\n  };\n\n  post = async (req, res) => {\n    try {\n      const data = await this.service.post(req.body);\n      return HttpResponser.successJson(res, data, 201);\n    } catch (error) {\n      return HttpResponser.errorJson(res, error);\n    }\n  };\n\n  put = async (req, res) => {\n    try {\n      await this.service.put(req.params.id, req.body);\n      const updated = await this.service.getById({ id: req.params.id });\n      return HttpResponser.successJson(res, updated);\n    } catch (error) {\n      console.log(error);\n      return HttpResponser.errorJson(res, error);\n    }\n  };\n\n  delete = async (req, res) => {\n    try {\n      await this.service.delete(req.params.id);\n      return HttpResponser.successEmpty(res);\n    } catch (error) {\n      return HttpResponser.errorJson(res, error);\n    }\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA0B;AAGnB,MAAe,uBAAuB;AAAA,EAG3C,YAAY,SAA8B;AAI1C,uBAAc,OAAO,KAAK,QAAQ;AAChC,UAAI;AACF,cAAM,EAAE,MAAM,MAAM,IAAI,IAAI;AAC5B,cAAM,OAAO,MAAM,KAAK,QAAQ,YAAY,MAAM,KAAK;AACvD,eAAO,YAAAA,QAAc,YAAY,KAAK,IAAI;AAAA,MAC5C,SAAS,OAAO;AACd,eAAO,YAAAA,QAAc,UAAU,KAAK,KAAK;AAAA,MAC3C;AAAA,IACF;AAEA,kBAAS,OAAO,GAAG,QAAQ;AACzB,UAAI;AACF,cAAM,OAAO,MAAM,KAAK,QAAQ,OAAO;AACvC,eAAO,YAAAA,QAAc,YAAY,KAAK,IAAI;AAAA,MAC5C,SAAS,OAAO;AACd,eAAO,YAAAA,QAAc,UAAU,KAAK,KAAK;AAAA,MAC3C;AAAA,IACF;AAEA,mBAAU,OAAO,KAAK,QAAQ;AAC5B,UAAI;AACF,cAAM,OAAO,MAAM,KAAK,QAAQ,QAAQ;AAAA,UACtC,IAAI,IAAI,OAAO;AAAA,UACf,SAAS;AAAA,QACX,CAAC;AACD,eAAO,YAAAA,QAAc,YAAY,KAAK,IAAI;AAAA,MAC5C,SAAS,OAAO;AACd,eAAO,YAAAA,QAAc,UAAU,KAAK,KAAK;AAAA,MAC3C;AAAA,IACF;AAEA,gBAAO,OAAO,KAAK,QAAQ;AACzB,UAAI;AACF,cAAM,OAAO,MAAM,KAAK,QAAQ,KAAK,IAAI,IAAI;AAC7C,eAAO,YAAAA,QAAc,YAAY,KAAK,MAAM,GAAG;AAAA,MACjD,SAAS,OAAO;AACd,eAAO,YAAAA,QAAc,UAAU,KAAK,KAAK;AAAA,MAC3C;AAAA,IACF;AAEA,eAAM,OAAO,KAAK,QAAQ;AACxB,UAAI;AACF,cAAM,KAAK,QAAQ,IAAI,IAAI,OAAO,IAAI,IAAI,IAAI;AAC9C,cAAM,UAAU,MAAM,KAAK,QAAQ,QAAQ,EAAE,IAAI,IAAI,OAAO,GAAG,CAAC;AAChE,eAAO,YAAAA,QAAc,YAAY,KAAK,OAAO;AAAA,MAC/C,SAAS,OAAO;AACd,gBAAQ,IAAI,KAAK;AACjB,eAAO,YAAAA,QAAc,UAAU,KAAK,KAAK;AAAA,MAC3C;AAAA,IACF;AAEA,kBAAS,OAAO,KAAK,QAAQ;AAC3B,UAAI;AACF,cAAM,KAAK,QAAQ,OAAO,IAAI,OAAO,EAAE;AACvC,eAAO,YAAAA,QAAc,aAAa,GAAG;AAAA,MACvC,SAAS,OAAO;AACd,eAAO,YAAAA,QAAc,UAAU,KAAK,KAAK;AAAA,MAC3C;AAAA,IACF;AA7DE,SAAK,UAAU;AAAA,EACjB;AA6DF;",
  "names": ["HttpResponser"]
}
